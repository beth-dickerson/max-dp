openapi: 3.0.1
info:
  contact:
    name: Elsevier Optimized Learning Suite
    url: 'https://github.com/elsevierPTG/eols-assessment-service'
  version: 2.1.8
  title: assessment-service
  description: |-
    # Introduction

    The Assessment Domain gathers that content and returns it in a form that's useful for students or instructors to use as class
    material. All data generated by this service is tied to a user, isbn, or course.


  /api/v2/assessment:
    get:
      tags:
        - assessments
      summary: Get an Assessment record by user id and assignment id
      operationId: getAssessmentByUserIdAndAssignmentId
      parameters:
        - name: assignmentId
          in: query
          description: assignmentId
          required: true
          schema:
            type: string
        - name: userId
          in: query
          description: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Assessment'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
        - assessments
      summary: 'Start the assessment for this student'
      operationId: createAssessmentByUserId
      requestBody:
        description: assessment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        '201':
          description: Created
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false

  /api/v2/assessment/{id}:
    get:
      tags:
        - assessments
      summary: Get an assessment by its id
      operationId: getAssessmentById
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
        - assessments
      summary: 'Delete Assessment by id and user id'
      operationId: deleteAssessmentById
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false

  /api/v2/assessment/{assessmentId}/questions/count:
    get:
      tags:
        - assessment-questions
      summary: Retrieve the number of questions answered in a given assessment
      description: Get the number of questions answered in this assessment
      operationId: getQuestionCountForAssessment
      parameters:
        - name: assessmentId
          in: path
          description: assessmentId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false

  /api/v2/assessment/assignmentId/{assignmentId}:
    get:
      tags:
        - assessments
      summary: Get Assessment attempt by assignment id and user id in token
      operationId: getAssessmentByAssignmentOfCurrentUser
      parameters:
        - name: assignmentId
          in: path
          description: assignmentId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false

  /api/v2/assignment/{assignmentId}:
    get:
      tags:
        - assignments
      summary: Get assignment by id
      operationId: getAssignment
      parameters:
        - name: assignmentId
          in: path
          description: assignmentId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
        - assignments
      summary: Delete an assignment
      operationId: deleteAssignment
      parameters:
        - name: assignmentId
          in: path
          description: assignmentId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content: {}
        '204':
          description: No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
      deprecated: false



components:
  schemas:
    Assessment:
      title: Assessment
      required:
        - assessmentGoals
        - assessmentTopics
        - isbn
        - type
      type: object
      properties:
        assessmentGoals:
          type: string
        assessmentTopics:
          type: string
        assignmentId:
          type: integer
          format: int64
        courseSectionId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        isbn:
          type: string
        lessonId:
          type: string
        contentId:
          type: string
        status:
          type: string
          enum:
            - NOT_STARTED
            - IN_PROGRESS
            - COMPLETED
        studyMode:
          type: boolean
        type:
          type: string
          enum:
            - COACH
            - SKILL
            - POST
            - EXAM
            - MINI
            - MASTERY
            - STANDARD
            - QUIZ_BY_QUESTION
            - SINGLE_STUDENT
        updatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
    Assignment:
      title: Assignment
      required:
        - assignmentGoals
        - assignmentGradeType
        - assignmentTopics
        - assignmentType
        - availableDate
        - isbn
        - targetType
        - title
      type: object
      properties:
        assignmentGoals:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentGoal'
        assignmentGradeType:
          type: string
          enum:
            - NOT_GRADED
            - PASS_FAIL
            - SCORED
        assignmentOptions:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentOptions'
        assignmentQuestions:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentQuestion'
        assignmentScoreType:
          type: string
          enum:
            - BEST
            - FIRST
            - LAST
        assignmentTopics:
          type: array
          items:
            $ref: '#/components/schemas/AssignmentTopic'
        assignmentType:
          type: string
          enum:
            - COACH
            - SKILL
            - POST
            - EXAM
            - MINI
            - MASTERY
            - STANDARD
            - QUIZ_BY_QUESTION
            - LESSONS
            - SIMULATION
            - NON_ADAPTIVE_QUIZZING
            - ELSEVIER_ADAPTIVE_QUIZZING
            - SINGLE_STUDENT
        availableDate:
          type: string
          format: date-time
        courseSectionId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        elsAssignmentId:
          type: string
        endDate:
          type: string
          format: date-time
        gradePoints:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        isbn:
          type: string
        lmsAssignmentGuid:
          type: string
        sendResultToGradebook:
          type: boolean
        studentAssignments:
          type: array
          items:
            $ref: '#/components/schemas/StudentAssignment'
        students:
          type: array
          items:
            type: integer
            format: int64
        studyMode:
          type: boolean
        targetType:
          type: string
          enum:
            - COURSE
            - STUDENT
        title:
          type: string
        updatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
  securitySchemes:
    JWT:
      description: |
        You will need a JWT Token to access any remote API. To get a JWT Token, check the token documentation.
        Usage format: `Bearer <JWT>`
      type: http
      scheme: bearer
      bearerFormat: JWT